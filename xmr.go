package main

import (
	"errors"
	"fmt"
	"io"
	"net/http"
	"regexp"
	"slices"
	"sort"
	"sync"
	"time"

	"xmr_scanner/levin"
)

type ScannerXMR struct {
	nodelist         *Nodelist
	node             string
	lastBlockHeight  int32
	lastBlockHash    string
	lashBlockHashArr map[int32]string

	connected bool
	destroy   bool
	uptime    time.Time
	blocks    *Pool

	n  Notifier
	db DBWrapper

	peerVersion int32
	serviceInfo string

	conn      *levin.Client
	chainName string
	peer_id   uint64
}

const (
	LevelInfo    = "üîµINFOüîµ"
	LevelSuccess = "üü¢SUCCESSüü¢"
	LevelWarning = "üü°WARNINGüü°"
	LevelError   = "üî¥ERRORüî¥"
	LevelGray    = "‚ö´INFO‚ö´"
)

func (p *ScannerXMR) GenerateSequence() {
	currentHeight := p.lastBlockHeight

	sequence := make([]int32, 0, 28) // 11 + 16 + 1 = 28 —ç–ª–µ–º–µ–Ω—Ç–æ–≤

	// –®–∞–≥ 1: 11 —á–∏—Å–µ–ª, —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1 (–≤–∫–ª—é—á–∞—è –Ω–∞—á–∞–ª—å–Ω–æ–µ)
	current := currentHeight
	for i := 0; i < 11; i++ {
		sequence = append(sequence, current)
		current--
	}

	// –¢–µ–ø–µ—Ä—å current = –Ω–∞—á–∞–ª—å–Ω–æ–µ - 11
	// –ù–æ –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –≤—ã—á–∏—Ç–∞—Ç—å —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏ —Å (currentHeight - 10)
	// –¢–æ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ª–∏–Ω–µ–π–Ω–æ–π —Ñ–∞–∑–µ: currentHeight - 10
	// –í –∫–æ–¥–µ –≤—ã—à–µ: –ø–æ—Å–ª–µ 11 –∏—Ç–µ—Ä–∞—Ü–∏–π current = currentHeight - 11
	// –ó–Ω–∞—á–∏—Ç, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ: currentHeight - 10
	// ‚Üí —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: currentHeight - 10

	startExp := currentHeight - 10 // –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ª–∏–Ω–µ–π–Ω–æ–π —Ñ–∞–∑—ã

	// –®–∞–≥ 2: –≤—ã—á–∏—Ç–∞–µ–º 2^1, 2^2, ..., 2^16
	powerOfTwo := int32(2)
	for i := 0; i < 16; i++ {
		startExp -= powerOfTwo
		sequence = append(sequence, startExp)
		powerOfTwo *= 2 // 2, 4, 8, 16, ...
	}

	// –®–∞–≥ 3: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ 0
	sequence = append(sequence, 0)

	// –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å: map[int32]string
	// –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ p.lashBlockHashArr –æ–±—ä—è–≤–ª–µ–Ω –∫–∞–∫:
	// lashBlockHashArr map[int32]string

	// –ï—Å–ª–∏ –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
	if p.lashBlockHashArr == nil {
		p.lashBlockHashArr = make(map[int32]string)
	}

	// –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ)
	// –ò–ª–∏ –º–æ–∂–Ω–æ –Ω–µ –æ—á–∏—â–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å
	for _, height := range sequence {
		// –ü–æ–∫–∞ —Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É ‚Äî –ø–æ–∑–∂–µ –ø–æ–¥—Å—Ç–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ö–µ—à–∏
		p.lashBlockHashArr[height] = "" // –∏–ª–∏ "pending", –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
	}
}

func (p *ScannerXMR) GetXMRChain(height int32) (*string, error) {
	resp, err := http.Get(fmt.Sprintf("https://xmrchain.net/search?value=%d", height))
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	html := string(body)
	return &html, nil
}

/*--- Basic Methods ---*/
func NewScannerXMR(nl *Nodelist, startHeight int32, hash string, n Notifier, d DBWrapper, c string) *ScannerXMR { //1
	scanner := &ScannerXMR{
		nodelist:        nl,
		lastBlockHeight: startHeight,
		lastBlockHash:   hash,
		uptime:          time.Now(),
		connected:       false,
		destroy:         false,
		blocks:          NewPool(),
		n:               n,
		db:              d,
		chainName:       c,
		peer_id:         uint64(time.Now().Unix()),
	}
	scanner.GenerateSequence()
	scanner.lashBlockHashArr[scanner.lastBlockHeight] = scanner.lastBlockHash
	scanner.lashBlockHashArr[0] = levin.MainnetGenesisTx
	return scanner
}

func (p *ScannerXMR) Close() {
	p.destroy = true
}

func (p *ScannerXMR) Connect() error {
	//–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö—ç—â–µ–π –ø–æ API
	{
	repeat:
		var wg sync.WaitGroup
		errs := 0
		for key, val := range p.lashBlockHashArr {
			if val == "" {
				wg.Add(1)
				go func() {
					defer wg.Done()
					html, err := p.GetXMRChain(key)
					if err != nil {
						errs += 1
						return
					}
					pattern := fmt.Sprintf(`Block hash \(height\): ([a-f0-9]{64}) \(%d\)`, key)
					re := regexp.MustCompile(`(?i)<h4.*?>` + pattern + `</h4>`)
					matches := re.FindStringSubmatch(*html)

					if len(matches) >= 2 {
						p.n.NotifyWithLevel(fmt.Sprintf("Set hash for key: %d", key), LevelSuccess)
						p.lashBlockHashArr[key] = matches[1]
					} else {
						errs += 1
					}
				}()
			}
		}
		wg.Wait()

		if errs > 0 {
			p.n.NotifyWithLevel("–ù–µ –≤—Å–µ —Ö—ç—à–∏ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã, —Å–µ–π—á–∞—Å –ø–æ–≤—Ç–æ—Ä–∏–º", LevelError)
			goto repeat
		} else {
			p.n.NotifyWithLevel("–í—Å–µ —Ö—ç—à–∏ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã", LevelSuccess)
			// for key, val := range p.lashBlockHashArr {
			// 	fmt.Println("Key:", key, "Val:", val)
			// }
		}
	}

	p.node = p.nodelist.GetRandomNode()
	p.n.NotifyWithLevel(fmt.Sprintf("Nodes count: %d; Connecting to the node: %s", len(*p.nodelist), p.node), LevelWarning)

	conn, err := levin.NewClient(p.node)
	if err != nil {
		p.n.NotifyWithLevel("Connecting to the node, error: "+p.node, LevelError)
		return err
	}
	p.conn = conn

	pl, err := p.conn.Handshake(uint64(p.lastBlockHeight), p.lastBlockHash, p.peer_id)
	if err != nil {
		p.n.NotifyWithLevel("Handshake error: "+err.Error(), LevelError)
		return err
	}

	if pl.CurrentHeight == 1 {
		return errors.New("Height equal '1', chain not synced")
	}

	p.n.NotifyWithLevel(fmt.Sprintf("Connected to host: %s; Current Height: %d; Peers count: %d", p.node, pl.CurrentHeight, len(pl.GetPeers())), LevelSuccess)
	p.SetPeers(pl.GetPeers())

	if p.blocks.Count() == 0 {
		p.n.NotifyWithLevel("Request queue for sync", LevelInfo)
		p.SendRequestChain()
	} else {
		p.blocks.SetSendedFalse()
	}

	p.connected = true
	return nil
}

func (p *ScannerXMR) Disconnect(err error) {
	if p.conn != nil {
		p.conn.Close()
		p.connected = false
		p.n.NotifyWithLevel(fmt.Sprintf("Disconnected from node: %s", p.node), LevelError)
		if err != nil {
			p.n.NotifyWithLevel(fmt.Sprintf("Disconnect Error: %s", err.Error()), LevelError)
		}
	}
}

func (p *ScannerXMR) SetPeers(pers map[string]*levin.Peer) {
	var list Nodelist
	for _, node := range pers {
		list = append(list, fmt.Sprintf("%s:%d", node.Ip, node.Port))
	}
	p.nodelist = &list
}

func GetBlock() []byte {
	return (&levin.PortableStorage{
		Entries: []levin.Entry{
			{
				Name:         "blocks",
				Serializable: levin.BoostString(" 1a572331ddfa81b42de7d41e662b84a9595b487c24e5243943129b84e4f91706"),
			},
		},
	}).Bytes()
}

/*--- Message Handlers ---*/
func (p *ScannerXMR) handleMessage(header *levin.Header, raw *levin.PortableStorage) error { //msg wire.Message
	ping := func(header *levin.Header) error {
		if header.Flags == levin.LevinPacketReponse {
			if levin.IsValidReturnCode(header.ReturnCode) {
				p.n.NotifyWithLevel("GET PONG WITH SUCCESS", LevelSuccess)
			} else {
				p.n.NotifyWithLevel(fmt.Sprintf("GET PONG WITH ERROR::%d", header.ReturnCode), LevelError)
			}
		} else {
			if header.ExpectsResponse {
				paylaod := (&levin.PortableStorage{
					Entries: []levin.Entry{
						{
							Name:         "status",
							Serializable: levin.BoostString("OK"),
						},
						{
							Name:         "peer_id",
							Serializable: levin.BoostUint64(p.peer_id),
						},
					},
				}).Bytes()
				p.conn.SendResponse(levin.CommandPing, paylaod)
			}
		}
		return nil
	}

	timedsync := func(header *levin.Header, raw *levin.PortableStorage) error {
		if header.Flags == levin.LevinPacketReponse {
			if levin.IsValidReturnCode(header.ReturnCode) {
				p.n.NotifyWithLevel("GET TIMED SYNC RESPONSE SUCCESS", LevelSuccess)
			} else {
				p.n.NotifyWithLevel(fmt.Sprintf("GET TIMED SYNC RESPONSE ERROR::%d", header.ReturnCode), LevelError)
			}
		} else {
			p.n.NotifyWithLevel("SEND TIMED SYNC RESPONSE", LevelWarning)
			p.conn.SendResponse(levin.CommandTimedSync, levin.NewRequestTimedSync(uint64(p.lastBlockHeight), p.lastBlockHash).Bytes())
		}
		return nil
	}

	processqueue := func(header *levin.Header, raw *levin.PortableStorage) error {
		for _, entry := range raw.Entries {
			if entry.Name == "m_block_ids" {
				if hashes, err := ProcessBlockIds(entry.Value); err == nil {
					previosHash := p.lastBlockHash
					for _, hash := range hashes {
						if hash == p.lastBlockHash {
							continue
						}
						b := Block{
							sended:       false,
							received:     false,
							Hash:         hash,
							PreviousHash: previosHash,
						}
						p.blocks.Add(hash, &b)
						previosHash = hash
						p.n.NotifyWithLevel(fmt.Sprintf("Block Hash: %s, Previous Hash: %s", b.Hash, b.PreviousHash), LevelSuccess)

					}
				}
			}
		}
		return nil
	}

	processblocks := func(header *levin.Header, raw *levin.PortableStorage) error {
		for _, entry := range raw.Entries {
			if entry.Name == "blocks" {
				for _, blk := range entry.Entries() {
					block := levin.NewBlock()
					for _, ibl := range blk.Entries() {
						if ibl.Name == "block" {
							block.SetBlockData([]byte(ibl.String()))
						} else {
							for _, itx := range ibl.Entries() {
								block.InsertTx([]byte(itx.String()))
							}
						}
					}
					// p.n.NotifyWithLevel(fmt.Sprintf("block len: %d", len(block.block)), LevelSuccess)
					for _, tx := range block.TXs {
						p.n.NotifyWithLevel(fmt.Sprintf(" - tx len: %d", len(tx.Raw)), LevelSuccess)
					}
					p.n.NotifyWithLevel("=====", LevelSuccess)
				}
			}
		}
		return nil
	}

	switch header.Command {
	case levin.CommandPing: // <- DONE
		return ping(header)
	case levin.CommandTimedSync: // <- DONE
		return timedsync(header, raw)
	case levin.NotifyResponseChainEntry: // <- DONE
		return processqueue(header, raw)
	case levin.NotifyResponseGetObjects:
		return processblocks(header, raw)
	default:
		p.n.NotifyWithLevel(fmt.Sprintf("Unhandeled message::%d", header.Command), LevelGray)
		p.showHeader(header)
		return nil
	}
}

/*--- Loop Methods ---*/
func (p *ScannerXMR) MainLoop() { //3
	go p.GetBlockDataLoop()
	// go p.WriteBlockToDBLoop()
	go p.KeepConnectionLoop()
	go p.ReadStreamLoop()
}

func (p *ScannerXMR) KeepConnectionLoop() {
	for !p.destroy {
		if !p.connected {
			p.Connect()
		} else {
			time.Sleep(time.Second * 5)
		}
	}

	if p.destroy {
		p.conn.Close()
	}
}

func (p *ScannerXMR) ReadStreamLoop() {
	for !p.destroy {
		if p.connected {
			if header, raw, err := p.conn.ReadMessage(); err != nil {
				p.Disconnect(err)
			} else {
				p.handleMessage(header, raw)
			}
		}
		time.Sleep(time.Millisecond * 200)
	}
}

func (p *ScannerXMR) GetBlockHashes() []string {
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	n := len(p.lashBlockHashArr)
	if n == 0 {
		return []string{}
	}

	// –®–∞–≥ 1: —Å–æ–±—Ä–∞—Ç—å –∫–ª—é—á–∏ (–≤—ã—Å–æ—Ç—ã)
	keys := make([]int32, 0, n)
	for height := range p.lashBlockHashArr {
		keys = append(keys, height)
	}

	// –®–∞–≥ 2: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] > keys[j] // –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
	})

	// –®–∞–≥ 3: —Å–æ–±—Ä–∞—Ç—å —Ö–µ—à–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
	hashes := make([]string, 0, n)
	for _, height := range keys {
		hash := p.lashBlockHashArr[height]
		// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–µ—à –Ω–µ –ø—É—Å—Ç–æ–π
		if hash != "" {
			hashes = append(hashes, hash)
		}
	}

	return hashes
}

func (p *ScannerXMR) SendRequestChain() {
	p.n.NotifyWithLevel("SendNotifyRequestChain", LevelSuccess)
	balbik := (&levin.PortableStorage{
		Entries: []levin.Entry{
			{
				Name:         "block_ids",
				Serializable: levin.BoostBlockIds(p.GetBlockHashes()),
			},
		},
	}).Bytes()

	p.conn.SendRequest(levin.NotifyRequestChain, balbik)
}

const packetsize = 10 // 100

func (p *ScannerXMR) GetBlockDataLoop() {
	for !p.destroy {
		time.Sleep(time.Second * 3)
		if p.blocks.Count() == 0 {
			continue
		}

		//TODO: –ü–æ –∏–¥–µ–µ –Ω–∞–¥–æ —Å–æ–±–∏—Ä–∞—Ç—å –ø–∞–∫–µ—Ç—ã –ø–æ —Å—Ç–æ –±–ª–æ–∫–æ–≤ –∏ —Ç–∞–∫ –∏—Ö –æ—Ç—Ä–ø–∞–≤–ª—è—Ç—å
		lst := make(map[string]string)
		prevHash := p.lastBlockHash
		blocks := []string{}

		p.blocks.Range(func(key string, value *Block) bool {
			if !value.sended {
				lst[value.PreviousHash] = key
			}
			return true
		})

		for i := 0; i < packetsize; i++ {
			val := lst[prevHash]
			if val == "" {
				break
			}
			blocks = append(blocks, val)
			prevHash = val
		}

		if len(blocks) == 0 {
			continue
		}

		for i, val := range blocks {
			p.n.NotifyWithLevel(fmt.Sprintf("I: %d, val: %s", i, val), LevelGray)
		}

		p.n.NotifyWithLevel("RequestBlocks", LevelSuccess)
		bulbik := (&levin.PortableStorage{
			Entries: []levin.Entry{
				{
					Name:         "blocks",
					Serializable: levin.BoostBlock(blocks),
				},
			},
		}).Bytes()

		err := p.conn.SendRequest(levin.NotifyRequestGetObjects, bulbik)
		if err == nil {
			incblocks := 0
			p.blocks.Range(func(key string, value *Block) bool {
				if slices.Contains(blocks, key) {
					value.sended = true
					incblocks += 1
				}

				if incblocks == packetsize {
					return false
				}
				return true
			})
		}

	}
}
