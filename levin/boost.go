package levin

import (
	"encoding/binary"
	"encoding/hex"
	"fmt"
)

const (
	BoostSerializeTypeInt64 byte = 0x1
	BoostSerializeTypeInt32 byte = 0x2
	BoostSerializeTypeInt16 byte = 0x3
	BoostSerializeTypeInt8  byte = 0x4

	BoostSerializeTypeUint64 byte = 0x5
	BoostSerializeTypeUint32 byte = 0x6
	BoostSerializeTypeUint16 byte = 0x7
	BoostSerializeTypeUint8  byte = 0x8

	BoostSerializeTypeDouble byte = 0x9

	BoostSerializeTypeString byte = 0x0a
	BoostSerializeTypeBool   byte = 0x0b
	BoostSerializeTypeObject byte = 0x0c
	BoostSerializeTypeArray  byte = 0xd

	BoostSerializeFlagArray byte = 0x80
)

type BoostByte byte

func (v BoostByte) Bytes() []byte {
	return []byte{
		BoostSerializeTypeUint8,
		byte(v),
	}
}

type BoostUint8 uint8

func (v BoostUint8) Bytes() []byte {
	PutUint8 := func(b []byte, v uint8) {
		_ = b[0]
		b[0] = v
	}

	b := []byte{
		BoostSerializeTypeUint8, 0x00,
	}
	PutUint8(b[1:], uint8(v))
	return b
}

type BoostUint16 uint16

func (v BoostUint16) Bytes() []byte {
	b := []byte{
		BoostSerializeTypeUint16,
		0x00, 0x00,
	}
	binary.LittleEndian.PutUint16(b[1:], uint16(v))
	return b
}

type BoostUint32 uint32

func (v BoostUint32) Bytes() []byte {
	b := []byte{
		BoostSerializeTypeUint32,
		0x00, 0x00, 0x00, 0x00,
	}
	binary.LittleEndian.PutUint32(b[1:], uint32(v))
	return b
}

type BoostUint64 uint64

func (v BoostUint64) Bytes() []byte {
	b := []byte{
		BoostSerializeTypeUint64,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
	}

	binary.LittleEndian.PutUint64(b[1:], uint64(v))

	return b
}

type BoostString string

func (v BoostString) Bytes() []byte {
	b := []byte{BoostSerializeTypeString}

	varInB, err := VarIn(len(v))
	if err != nil {
		panic(fmt.Errorf("varin '%d': %w", len(v), err))
	}

	return append(b, append(varInB, []byte(v)...)...)
}

type BoostHash string

func (v BoostHash) Bytes() []byte {
	const HASH_SIZE = 32

	hashBytes, err := hex.DecodeString(string(v))
	if err != nil {
		return nil
	}

	if len(hashBytes) != HASH_SIZE {
		return nil
	}

	result := make([]byte, 0, HASH_SIZE)
	result = append(result, hashBytes...)

	prefix := []byte{BoostSerializeTypeString, BoostSerializeFlagArray}
	result = append(prefix, result...)

	return result
}

type BoostBlockIds []string

var prefix = []byte{
	0x0a, 0x01, 0x0e,
}

var last_hash = []byte{
	0xa8, 0x12, 0xaf, 0x41, 0x77, 0x1e, 0x7d, 0x5b, 0x7b, 0x88, 0x13, 0xe6, 0x84, 0x13, 0x70, 0xc0,
	0x61, 0x5f, 0xca, 0xb3, 0x42, 0x27, 0xa6, 0xa0, 0x4a, 0xac, 0xeb, 0x4b, 0x76, 0xea, 0xae, 0xd0,
}

var genesis_hash_mainnet = []byte{
	0x41, 0x80, 0x15, 0xbb, 0x9a, 0xe9, 0x82, 0xa1, 0x97, 0x5d, 0xa7, 0xd7, 0x92, 0x77, 0xc2, 0x70,
	0x57, 0x27, 0xa5, 0x68, 0x94, 0xba, 0x0f, 0xb2, 0x46, 0xad, 0xaa, 0xbb, 0x1f, 0x46, 0x32, 0xe3,
}

var fullhash = []byte{
	0xa1, 0x79,
	0x00, 0x18, 0x70, 0xa7, 0x92, 0x45, 0xe8, 0xdb, 0x5e, 0x4b, 0xb2, 0x33, 0xa7, 0xdc, 0x39, 0xe3,
	0x90, 0x12, 0x73, 0x52, 0x44, 0x59, 0x91, 0x29, 0x61, 0xe7, 0x23, 0x76, 0x32, 0x51, 0x52, 0xdd,
	0x69, 0x65, 0xa6, 0xc1, 0x30, 0xf7, 0x2b, 0x83, 0x80, 0x33, 0xa9, 0xed, 0x8e, 0xbb, 0xd8, 0x8c,
	0x89, 0xe6, 0x50, 0x8e, 0xfa, 0x92, 0x1f, 0xcf, 0x8f, 0xf0, 0x66, 0x70, 0x72, 0xd5, 0x68, 0x24,
	0x3d, 0xf1, 0x75, 0xd0, 0xad, 0x76, 0x6d, 0x97, 0x15, 0x8c, 0xca, 0x4e, 0xa7, 0x31, 0xfc, 0x0c,
	0x6b, 0x07, 0x91, 0xfb, 0x26, 0xf1, 0xb1, 0x78, 0x27, 0x0b, 0x14, 0x3c, 0xba, 0x7d, 0xc5, 0xba,
	0x6f, 0x37, 0xf5, 0xe9, 0xd6, 0xa2, 0xc4, 0x20, 0x44, 0xa5, 0xb2, 0xc7, 0x4e, 0x10, 0x82, 0x85,
	0x08, 0x8d, 0xe3, 0xfe, 0xe5, 0x46, 0x62, 0x8a, 0x78, 0x74, 0xc3, 0xbb, 0xba, 0xc5, 0xb8, 0x19,
	0xee, 0x9a, 0xb5, 0x2e, 0x75, 0xb9, 0x87, 0xcc, 0x3a, 0x24, 0xc6, 0xf5, 0xdb, 0xf9, 0xcf, 0xd8,
	0x45, 0x34, 0x9f, 0x62, 0x8b, 0x39, 0xd0, 0x7c, 0x35, 0x1b, 0xd2, 0x87, 0x10, 0xaf, 0x04, 0x8d,
	0xda, 0x36, 0x46, 0x32, 0x4a, 0x08, 0x29, 0xa9, 0x68, 0x7d, 0xbf, 0xa6, 0x88, 0x06, 0xa8, 0x70,
	0x8b, 0xc3, 0x93, 0x39, 0x87, 0x97, 0xec, 0xb5, 0xb2, 0xcc, 0x88, 0xc1, 0x52, 0x65, 0xae, 0x6b,
	0x8b, 0xf5, 0xff, 0x01, 0x66, 0x65, 0xe7, 0x6f, 0xd7, 0x39, 0x45, 0x02, 0xda, 0xdd, 0x71, 0xed,
	0xe5, 0x08, 0x06, 0x91, 0x34, 0x08, 0x1b, 0x73, 0xef, 0xbe, 0xd7, 0x82, 0xa4, 0xd4, 0x85, 0x16,
	0x16, 0xf2, 0x2a, 0x77, 0x08, 0xd8, 0x84, 0x4b, 0xf5, 0xed, 0x5f, 0x79, 0xbf, 0x75, 0xe2, 0x00,
	0x70, 0x1b, 0x04, 0x57, 0x94, 0xbf, 0xc2, 0xa1, 0xed, 0x13, 0x92, 0xbd, 0x2d, 0x86, 0xf6, 0xe4,
	0x48, 0x60, 0xee, 0xdc, 0xdd, 0x9e, 0x8f, 0x79, 0x45, 0x61, 0x6f, 0x6a, 0x3f, 0x98, 0x48, 0x5f,
	0x9e, 0xca, 0x6f, 0x77, 0xf3, 0x46, 0x6f, 0x1a, 0xbe, 0xda, 0x3c, 0xfa, 0xa8, 0x61, 0x14, 0xcf,
	0xfe, 0x8e, 0xa6, 0x35, 0xda, 0x90, 0x6c, 0x9f, 0x77, 0xdb, 0x39, 0xbf, 0x77, 0x74, 0x72, 0xf2,
	0x93, 0xb0, 0x02, 0x3d, 0x47, 0xc5, 0x4c, 0x9b, 0x72, 0x91, 0x4b, 0xa9, 0xce, 0x28, 0x5e, 0xa1,
	0x38, 0xc3, 0xfe, 0x00, 0x55, 0x7e, 0xc1, 0x7a, 0x75, 0x7c, 0x11, 0x80, 0xff, 0xd2, 0xc1, 0xd4,
	0x60, 0x34, 0xc5, 0x3a, 0xfb, 0x72, 0xea, 0x55, 0x79, 0xb0, 0x59, 0xea, 0x90, 0x4c, 0x0b, 0xdd,
	0xb0, 0x15, 0xd0, 0xef, 0xff, 0x62, 0xac, 0xe0, 0xef, 0x9e, 0x68, 0xa5, 0x14, 0x21, 0xd2, 0xce,
	0x0e, 0xa7, 0x22, 0x07, 0xa7, 0xf4, 0x92, 0x16, 0xe9, 0xbd, 0xb0, 0x06, 0x1c, 0x2a, 0xd8, 0xe0,
	0x7b, 0xad, 0xef, 0x86, 0xe9, 0xd5, 0xba, 0xc4, 0x2e, 0x12, 0xaf, 0xa9, 0x4a, 0x6c, 0x82, 0xf9,
	0x9e, 0x77, 0xb0, 0xbc, 0xdc, 0x31, 0xa0, 0x2d, 0xd9, 0xf9, 0xb1, 0x02, 0xaa, 0x1e, 0x15, 0x6a,
	0xe8, 0x22, 0xb2, 0xa5, 0x5d, 0xb3, 0xf9, 0x3c, 0x57, 0x46, 0x8f, 0x08, 0xc4, 0x02, 0xbb, 0x19,
	0x8d, 0x9e, 0xea, 0xba, 0x1f, 0x9b, 0x53, 0x70, 0x13, 0xed, 0x3d, 0xc0, 0x3e, 0x78, 0x6c, 0xbc,
	0xa5, 0x24, 0xac, 0xda, 0xc1, 0x34, 0xc1, 0x50, 0x46, 0x6d, 0xce, 0x9a, 0xbf, 0x5b, 0x3a, 0x90,
	0x97, 0xa9, 0x2f, 0xc9, 0x1c, 0xe0, 0x07, 0x87, 0xe2, 0x0c, 0x29, 0x2a, 0x22, 0xcd, 0x86, 0x2f,
	0x5d, 0xb5, 0x81, 0x37, 0x4b, 0x04, 0x55, 0xc9, 0x52, 0x3d, 0x0d, 0xe4, 0xc9, 0xce, 0x05, 0xc3,
	0x25, 0x04, 0x79, 0x9d, 0x41, 0xd3, 0x63, 0x35, 0xb8, 0xc3, 0x12, 0x08, 0x1c, 0xa7, 0xdb, 0x36,
	0xd3, 0x50, 0xb8, 0xf9, 0x72, 0x62, 0xdf, 0xd3, 0x5b, 0x45, 0xcb, 0x06, 0x5a, 0x3e, 0xcb, 0xe0,
	0x56, 0x5a, 0x0c, 0xeb, 0xe9, 0x7b, 0x14, 0x63, 0x05, 0x9c, 0x61, 0x0d, 0xaa, 0x00, 0xe0, 0xca,
	0xcf, 0x86, 0x05, 0xa5, 0xb2, 0xff, 0xce, 0xec, 0xb8, 0xe2, 0x37, 0xa8, 0xb7, 0xc9, 0x6e, 0x79,
	0xd9, 0xed, 0x7d, 0xd2, 0xc2, 0x5e, 0x96, 0x09, 0xa6, 0x24, 0xb6, 0x85, 0xd3, 0xaf, 0xa2, 0x1b,
	0x53, 0x48, 0x94, 0x1a, 0xe8, 0x62, 0xdc, 0x86, 0x08, 0x3f, 0x47, 0x33, 0xde, 0x87, 0x71, 0x18,
	0x27, 0xf2, 0xa3, 0x9c, 0xb0, 0x66, 0xe3, 0x5e, 0xe2, 0x9f, 0x52, 0xb6, 0xdc, 0x6c, 0xca, 0x3b,
	0xf7, 0x6e, 0xa0, 0xf6, 0x81, 0x99, 0x8c, 0xe3, 0x96, 0x47, 0x06, 0xd2, 0x1e, 0x2e, 0x91, 0x96,
	0x6d, 0xa7, 0x12, 0x30, 0x12, 0x40, 0x0a, 0x6b, 0x64, 0xdd, 0x38, 0x26, 0x9b, 0x34, 0xd4, 0xa1,
	0xaa, 0xed, 0x41, 0xdb, 0x26, 0xc1, 0x59, 0xa8, 0x57, 0x23, 0x72, 0x3b, 0x19, 0xf3, 0x07, 0x23,
	0x57, 0x24, 0x9c, 0xd6, 0x1e, 0x40, 0xed, 0x0d, 0x5c, 0x09, 0x00, 0x27, 0x2d, 0x90, 0x4a, 0xf8,
	0xeb, 0x98, 0xcb, 0xa9, 0xee, 0xf8, 0x91, 0x17, 0xb6, 0x1a, 0x22, 0x8e, 0x43, 0x05, 0x57, 0x6b,
	0xfb, 0xef, 0xfc, 0xb1, 0xfe, 0x06, 0x7b, 0x7d, 0xea, 0x15, 0x18, 0x3b, 0x9f, 0x1c, 0x7a, 0x39,
	0xdf, 0xdf, 0xe3, 0x6e, 0x6c, 0x41, 0xd2, 0xa2, 0xa0, 0x10, 0x76, 0x6e, 0x1d, 0xb1, 0xcb, 0x7d,
	0x47, 0x69, 0xd7, 0xe9, 0x7a, 0x22, 0xd0, 0x0e, 0x62, 0x85, 0x11, 0x35, 0x30, 0xe3, 0x28, 0x67,
	0xe7, 0x9b, 0x61, 0x05, 0x7c, 0xb6, 0x90, 0x20, 0x58, 0x1f, 0xfd, 0x64, 0x4b, 0x98, 0xf6, 0x60,
	0xd2, 0x17, 0x6e, 0xe6, 0x58, 0x6e, 0x86, 0x98, 0x18, 0x01, 0x7f, 0x5c, 0x41, 0x99, 0xa9, 0x41,
	0x45, 0x4d, 0x04, 0x43, 0x1b, 0x25, 0x90, 0x3c, 0x8c, 0x29, 0x6d, 0xc3, 0x62, 0x4f, 0xee, 0x6e,
	0x8e, 0x57, 0xc1, 0xce, 0x25, 0xde, 0x9f, 0x01, 0x42, 0x17, 0x6e, 0x97, 0x12, 0x51, 0x67, 0xd7,
	0x58, 0x8e, 0x5e, 0xae, 0xef, 0xef, 0xca, 0x20, 0x4b, 0x18, 0xf4, 0x2c, 0x6c, 0xc4, 0x38, 0xef,
	0x25, 0x18, 0x59, 0xb0, 0xf2, 0x85, 0x36, 0xf2, 0xf7, 0x58, 0x64, 0xaa, 0x35, 0xe4, 0x7d, 0x04,
	0x38, 0xe7, 0xda, 0xb5, 0x33, 0xd2, 0xfa, 0x9c, 0xdd, 0x34, 0xb6, 0xb7, 0xbd, 0xac, 0x57, 0xee,
	0x59, 0x98, 0x06, 0x84, 0x8e, 0x9d, 0x85, 0xfd, 0x5d, 0x08, 0xc9, 0x4d, 0x83, 0xff,
}

func (blockIds BoostBlockIds) Bytes2() []byte {
	// заранее считаем итоговую длину
	totalSize := len(prefix) + len(genesis_hash_mainnet)
	// totalSize += len(last_hash)
	totalSize += len(fullhash)

	// выделяем память сразу
	result := make([]byte, 0, totalSize)

	// склеиваем
	result = append(result, prefix...)
	// result = append(result, last_hash...)
	result = append(result, fullhash...)
	result = append(result, genesis_hash_mainnet...)

	return result
}

func (blockIds BoostBlockIds) Bytes() []byte {
	if len(blockIds) == 0 {
		return []byte{}
	}

	temp := make([]byte, 0, len(blockIds)*HASH_SIZE)
	for _, blockId := range blockIds {
		hashBytes, err := hex.DecodeString(blockId)
		if err != nil || len(hashBytes) != HASH_SIZE {
			return nil
		}

		temp = append(temp, hashBytes...)
	}

	totalSize := len(prefix)
	totalSize += len(temp)
	totalSize += len(genesis_hash_mainnet)

	result := make([]byte, 0, totalSize)

	result = append(result, prefix...)
	result = append(result, temp...)
	result = append(result, genesis_hash_mainnet...)

	return result
}
