package main

import (
	"context"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"io"
	"log"
	"net"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"
)

// Monero P2P –ø—Ä–æ—Ç–æ–∫–æ–ª –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const (
	MONERO_P2P_SIGNATURE      = 0x0101010101012101
	MONERO_P2P_HANDSHAKE_FLAG = 0x01
	MONERO_P2P_PING           = 1000
	MONERO_P2P_NEW_BLOCK      = 2001
	MONERO_P2P_NEW_TXS        = 2002
)

// P2P —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
type P2PMessage struct {
	Signature uint64
	Size      uint64
	Command   uint32
	Data      []byte
}

// Handshake —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
type HandshakeData struct {
	NetworkID    [16]byte
	MyPort       uint32
	PeerID       uint64
	SupportFlags uint32
}

// Block notification —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
type BlockNotification struct {
	BlockHash [32]byte
	Height    uint64
	Timestamp uint64
	TxCount   uint32
}

type MoneroP2PMonitor struct {
	conn           net.Conn
	peerAddresses  []string
	currentPeer    int
	blockHeight    uint64
	mutex          sync.RWMutex
	stopChan       chan struct{}
	reconnectDelay time.Duration
}

func NewMoneroP2PMonitor(peers []string) *MoneroP2PMonitor {
	return &MoneroP2PMonitor{
		peerAddresses:  peers,
		currentPeer:    0,
		reconnectDelay: 5 * time.Second,
		stopChan:       make(chan struct{}),
	}
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Monero –Ω–æ–¥–µ
func (m *MoneroP2PMonitor) connectToPeer() error {
	if m.currentPeer >= len(m.peerAddresses) {
		m.currentPeer = 0
	}

	address := m.peerAddresses[m.currentPeer]
	log.Printf("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–¥–µ: %s", address)

	conn, err := net.DialTimeout("tcp", address, 10*time.Second)
	if err != nil {
		m.currentPeer++
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s: %v", address, err)
	}

	m.conn = conn
	return nil
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ handshake
func (m *MoneroP2PMonitor) sendHandshake() error {
	// –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ handshake –ø–∞–∫–µ—Ç–∞
	handshake := HandshakeData{
		MyPort:       0,
		PeerID:       uint64(time.Now().Unix()),
		SupportFlags: 1,
	}

	// Monero mainnet network ID (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	copy(handshake.NetworkID[:], []byte("MoneroMainNet123"))

	// –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è handshake –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
	data := make([]byte, 32)
	copy(data[:16], handshake.NetworkID[:])
	binary.LittleEndian.PutUint32(data[16:20], handshake.MyPort)
	binary.LittleEndian.PutUint64(data[20:28], handshake.PeerID)
	binary.LittleEndian.PutUint32(data[28:32], handshake.SupportFlags)

	msg := P2PMessage{
		Signature: MONERO_P2P_SIGNATURE,
		Size:      uint64(len(data)),
		Command:   MONERO_P2P_HANDSHAKE_FLAG,
		Data:      data,
	}

	return m.sendMessage(msg)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
func (m *MoneroP2PMonitor) sendMessage(msg P2PMessage) error {
	// –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
	header := make([]byte, 20)
	binary.LittleEndian.PutUint64(header[0:8], msg.Signature)
	binary.LittleEndian.PutUint64(header[8:16], msg.Size)
	binary.LittleEndian.PutUint32(header[16:20], msg.Command)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
	if _, err := m.conn.Write(header); err != nil {
		return err
	}

	if len(msg.Data) > 0 {
		if _, err := m.conn.Write(msg.Data); err != nil {
			return err
		}
	}

	return nil
}

// –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (m *MoneroP2PMonitor) readMessage() (*P2PMessage, error) {
	// –ß—Ç–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (20 –±–∞–π—Ç)
	header := make([]byte, 20)
	if _, err := io.ReadFull(m.conn, header); err != nil {
		return nil, err
	}

	msg := &P2PMessage{
		Signature: binary.LittleEndian.Uint64(header[0:8]),
		Size:      binary.LittleEndian.Uint64(header[8:16]),
		Command:   binary.LittleEndian.Uint32(header[16:20]),
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
	if msg.Signature != MONERO_P2P_SIGNATURE {
		return nil, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: %x", msg.Signature)
	}

	// –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
	if msg.Size > 0 {
		if msg.Size > 1024*1024 { // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			return nil, fmt.Errorf("—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %d –±–∞–π—Ç", msg.Size)
		}

		msg.Data = make([]byte, msg.Size)
		if _, err := io.ReadFull(m.conn, msg.Data); err != nil {
			return nil, err
		}
	}

	return msg, nil
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
func (m *MoneroP2PMonitor) handleNewBlock(data []byte) {
	if len(data) < 44 { // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±–ª–æ–∫–µ (—Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: %d –±–∞–π—Ç)", len(data))
		return
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–µ
	blockNotif := BlockNotification{
		Height:    binary.LittleEndian.Uint64(data[32:40]),
		Timestamp: binary.LittleEndian.Uint64(data[40:48]),
	}

	if len(data) >= 52 {
		blockNotif.TxCount = binary.LittleEndian.Uint32(data[48:52])
	}

	copy(blockNotif.BlockHash[:], data[0:32])

	m.mutex.Lock()
	if blockNotif.Height > m.blockHeight {
		m.blockHeight = blockNotif.Height
	}
	m.mutex.Unlock()

	log.Printf("üÜï –ù–û–í–´–ô –ë–õ–û–ö!")
	log.Printf("   –í—ã—Å–æ—Ç–∞: %d", blockNotif.Height)
	log.Printf("   –•–µ—à: %s", hex.EncodeToString(blockNotif.BlockHash[:8]))
	log.Printf("   –í—Ä–µ–º—è: %s", time.Unix(int64(blockNotif.Timestamp), 0).Format("15:04:05"))
	if blockNotif.TxCount > 0 {
		log.Printf("   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: %d", blockNotif.TxCount)
	}
	log.Printf("   ---")
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ ping —Å–æ–æ–±—â–µ–Ω–∏—è
func (m *MoneroP2PMonitor) sendPing() error {
	timestamp := uint64(time.Now().Unix())
	data := make([]byte, 8)
	binary.LittleEndian.PutUint64(data, timestamp)

	msg := P2PMessage{
		Signature: MONERO_P2P_SIGNATURE,
		Size:      8,
		Command:   MONERO_P2P_PING,
		Data:      data,
	}

	return m.sendMessage(msg)
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (m *MoneroP2PMonitor) startMonitoring(ctx context.Context) error {
	log.Printf("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏ Monero...")

	for {
		select {
		case <-ctx.Done():
			return nil
		case <-m.stopChan:
			return nil
		default:
		}

		// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–¥–µ
		if err := m.connectToPeer(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
			time.Sleep(m.reconnectDelay)
			continue
		}

		log.Printf("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ %s", m.peerAddresses[m.currentPeer])

		// –û—Ç–ø—Ä–∞–≤–∫–∞ handshake
		if err := m.sendHandshake(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ handshake: %v", err)
			m.conn.Close()
			time.Sleep(m.reconnectDelay)
			continue
		}

		log.Printf("Handshake –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

		// –ó–∞–ø—É—Å–∫ ping –≥–æ—Ä—É—Ç–∏–Ω—ã
		pingTicker := time.NewTicker(30 * time.Second)
		go func() {
			for {
				select {
				case <-pingTicker.C:
					if err := m.sendPing(); err != nil {
						log.Printf("–û—à–∏–±–∫–∞ ping: %v", err)
						return
					}
				case <-ctx.Done():
					return
				}
			}
		}()

		// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
		for {
			select {
			case <-ctx.Done():
				pingTicker.Stop()
				return nil
			default:
			}

			// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ timeout –¥–ª—è —á—Ç–µ–Ω–∏—è
			m.conn.SetReadDeadline(time.Now().Add(60 * time.Second))

			msg, err := m.readMessage()
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				break
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
			switch msg.Command {
			case MONERO_P2P_NEW_BLOCK:
				m.handleNewBlock(msg.Data)
			case MONERO_P2P_NEW_TXS:
				log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö")
			case MONERO_P2P_PING:
				log.Printf("–ü–æ–ª—É—á–µ–Ω ping –æ—Ç –Ω–æ–¥—ã")
			default:
				log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: –∫–æ–º–∞–Ω–¥–∞ %d, —Ä–∞–∑–º–µ—Ä %d", msg.Command, msg.Size)
			}
		}

		pingTicker.Stop()
		m.conn.Close()
		log.Printf("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ %v", m.reconnectDelay)
		time.Sleep(m.reconnectDelay)
	}
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (m *MoneroP2PMonitor) Stop() {
	close(m.stopChan)
	if m.conn != nil {
		m.conn.Close()
	}
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤—ã—Å–æ—Ç—ã –±–ª–æ–∫–∞
func (m *MoneroP2PMonitor) GetCurrentHeight() uint64 {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m.blockHeight
}

func main1() {
	// –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö Monero –Ω–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	peers := []string{
		"node.moneroworld.com:18080",
		"nodes.hashvault.pro:18080",
		"node.community.rino.io:18080",
		"p2pmd.xmrvsbeast.com:18080",
		"node-de.monero.net:18080",
	}

	log.Printf("üöÄ Monero P2P Block Monitor –∑–∞–ø—É—â–µ–Ω")
	log.Printf("–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã: %v", peers)

	// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
	monitor := NewMoneroP2PMonitor(peers)

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		<-sigChan
		log.Printf("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
		cancel()
		monitor.Stop()
	}()

	// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	if err := monitor.startMonitoring(ctx); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: %v", err)
	}

	log.Printf("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
}
